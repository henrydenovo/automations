const fs = require('fs');
const path = require('path');
const csv = require('csv-parser');
const { parse } = require('json2csv');
const axios = require('axios');
const hubspot = require('@hubspot/api-client');

const INPUT_CSV = path.join(__dirname, 'meteor.subscribers.csv');
const OUTPUT_CSV = path.join(__dirname, 'meteor.subscribers_updated.csv');
const GOOGLE_API_KEY = 'YOUR_GOOGLE_MAPS_API_KEY'; 
const HUBSPOT_API_KEY = 'YOUR_HUBSPOT_API_KEY';  

const hubspotClient = new hubspot.Client({ apiKey: HUBSPOT_API_KEY });

// Function to get coordinates from Google Maps API
async function getCoordinates(address, city, state) {
  try {
    const fullAddress = `${address}, ${city}, ${state}`;
    const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
      params: {
        address: fullAddress,
        key: GOOGLE_API_KEY,
      },
    });
    if (response.data.status === 'OK') {
      const location = response.data.results[0].geometry.location;
      return { lat: location.lat, lng: location.lng };
    } else {
      console.error(`Geocoding error: ${response.data.status} for ${fullAddress}`);
      return { lat: null, lng: null };
    }
  } catch (error) {
    console.error(`Error fetching coordinates for ${address}, ${city}, ${state}: ${error.message}`);
    return { lat: null, lng: null };
  }
}

// Function to get address from HubSpot
async function getAddressFromHubSpot(email) {
  try {
    const searchResponse = await hubspotClient.crm.contacts.searchApi.doSearch({
      filterGroups: [{ filters: [{ propertyName: 'email', operator: 'EQ', value: email }] }],
    });
    if (searchResponse.body.results.length > 0) {
      const contact = searchResponse.body.results[0].properties;
      return { address: contact.address, city: contact.city, state: contact.state };
    } else {
      return { address: null, city: null, state: null };
    }
  } catch (error) {
    console.error(`Error fetching address from HubSpot for ${email}: ${error.message}`);
    return { address: null, city: null, state: null };
  }
}

// Main function to process the CSV
async function processCSV() {
  const results = [];
  fs.createReadStream(INPUT_CSV)
    .pipe(csv())
    .on('data', async (row) => {
      if (!row.city || !row.state || !row.address || !row.lat || !row.lng) {
        // Attempt to fill missing data from HubSpot if email is available
        if (row.email) {
          const hubspotData = await getAddressFromHubSpot(row.email);
          row.address = row.address || hubspotData.address;
          row.city = row.city || hubspotData.city;
          row.state = row.state || hubspotData.state;
        }

        // Attempt to fill missing coordinates using Google Maps API
        if (!row.lat || !row.lng) {
          const coords = await getCoordinates(row.address, row.city, row.state);
          row.lat = row.lat || coords.lat;
          row.lng = row.lng || coords.lng;
        }
      }
      results.push(row);
    })
    .on('end', () => {
      const csvData = parse(results);
      fs.writeFileSync(OUTPUT_CSV, csvData);
      console.log('CSV file successfully processed and saved.');
    });
}

processCSV().catch((error) => {
  console.error(`Error processing CSV: ${error.message}`);
});
